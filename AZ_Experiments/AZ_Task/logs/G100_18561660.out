Current date and time 
##### START task 10000 grs #####
Start w/ time
CUDA is used

Preparing the data...
 Training data X (257023, 2439) Y (257023,)
 Test data X (28559, 2439) Y (28559,)

Parameter-stamp...
 --> task:          AZ_Task20-task
 --> model:         ember_MLP
 --> hyper-params:  i10000-lr0.001-b256-sgd
AZ_Task20-task--ember_MLP--i10000-lr0.001-b256-sgd--

----------------------------------------MAIN MODEL----------------------------------------
Classifier(
  (flatten): Flatten()
  (fcE): AZ_MLP_Net(
    (fc0): Linear(in_features=2439, out_features=2048, bias=True)
    (fc0_bn): BatchNorm1d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act0): ReLU()
    (fc0_drop): Dropout(p=0.5, inplace=False)
    (fc1): Linear(in_features=2048, out_features=1024, bias=True)
    (fc1_bn): BatchNorm1d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act1): ReLU()
    (fc1_drop): Dropout(p=0.5, inplace=False)
    (fc2): Linear(in_features=1024, out_features=512, bias=True)
    (fc2_bn): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act2): ReLU()
    (fc2_drop): Dropout(p=0.5, inplace=False)
    (fc3): Linear(in_features=512, out_features=256, bias=True)
    (fc3_bn): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act3): ReLU()
    (fc3_drop): Dropout(p=0.5, inplace=False)
    (fc4): Linear(in_features=256, out_features=128, bias=True)
    (fc4_bn): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (act4): ReLU()
    (fc4_drop): Dropout(p=0.5, inplace=False)
  )
  (classifier): AZ_Classifier(
    (fc_last): Linear(in_features=128, out_features=100, bias=True)
  )
)
------------------------------------------------------------------------------------------
--> this network has 7805156 parameters (~7.8 million)
      of which: - learnable: 7805156 (~7.8 million)
                - fixed: 0 (~0.0 million)
------------------------------------------------------------------------------------------

Training...
task 1 =>> taskLabels [0, 1, 2, 3, 4]
=> Acc: 1.000 Precision 1.000 Recall 1.000 F1 1.000 


accs [1.0]
 precisions [1.0]
 recalls [1.0]
 f1scores [1.0]
task 2 =>> taskLabels [5, 6, 7, 8, 9]

np.unique(Y) [0 1 2 3 4] np.unique(Y_train) [0 1 2 3 4]
=> Acc: 0.963 Precision 0.963 Recall 0.963 F1 0.964 
=> Acc: 0.998 Precision 0.998 Recall 0.998 F1 0.998 


accs [0.9630872483221476, 0.9983443708609272]
 precisions [0.9731543624161074, 1.0]
 recalls [0.9932885906040269, 1.0]
 f1scores [0.9891856783307624, 0.9965204349456318]
task 3 =>> taskLabels [10, 11, 12, 13, 14]

np.unique(Y) [0 1 2 3 4 5 6 7 8 9] np.unique(Y_train) [0 1 2 3 4 5 6 7 8 9]
=> Acc: 0.987 Precision 0.987 Recall 0.987 F1 0.987 
=> Acc: 0.975 Precision 0.975 Recall 0.975 F1 0.976 
=> Acc: 0.994 Precision 0.994 Recall 0.994 F1 0.994 


accs [0.9865771812080537, 0.9751655629139073, 0.9939759036144579]
 precisions [0.9865771812080537, 0.9850993377483444, 0.9969879518072289]
 recalls [0.9899328859060402, 0.9718543046357616, 0.9969879518072289]
 f1scores [0.9848094655242757, 0.9753497400258382, 1.0]
task 4 =>> taskLabels [15, 16, 17, 18, 19]

np.unique(Y) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14] np.unique(Y_train) [ 0  1  2  3  4  5  6  7  8  9 10 11 13 14]
=> Acc: 0.950 Precision 0.950 Recall 0.950 F1 0.948 
=> Acc: 0.960 Precision 0.960 Recall 0.960 F1 0.960 
=> Acc: 0.955 Precision 0.955 Recall 0.955 F1 0.954 
=> Acc: 0.937 Precision 0.937 Recall 0.937 F1 0.927 


accs [0.9496644295302014, 0.9602649006622517, 0.9548192771084337, 0.9367469879518072]
 precisions [0.9530201342281879, 0.9652317880794702, 0.9548192771084337, 0.9477911646586346]
 recalls [0.9530201342281879, 0.9437086092715232, 0.9337349397590361, 0.9337349397590361]
 f1scores [0.9392418945252224, 0.9703623127253564, 0.9576187200601766, 0.9292853884320864]
task 5 =>> taskLabels [20, 21, 22, 23, 24]

np.unique(Y) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19] np.unique(Y_train) [ 0  1  4  5  6  7  8  9 10 11 12 14 15 16 17 18 19]
=> Acc: 0.718 Precision 0.718 Recall 0.718 F1 0.687 
=> Acc: 0.930 Precision 0.930 Recall 0.930 F1 0.926 
=> Acc: 0.964 Precision 0.964 Recall 0.964 F1 0.963 
=> Acc: 0.908 Precision 0.908 Recall 0.908 F1 0.906 
=> Acc: 0.935 Precision 0.935 Recall 0.935 F1 0.935 


accs [0.7181208053691275, 0.9304635761589404, 0.963855421686747, 0.9076305220883534, 0.9352365847211208]
 precisions [0.761744966442953, 0.9139072847682119, 0.9397590361445783, 0.9116465863453815, 0.9230769230769231]
 recalls [0.714765100671141, 0.9238410596026491, 0.9246987951807228, 0.9246987951807228, 0.9209621993127147]
 f1scores [0.7074038485464754, 0.9259671073684697, 0.9431465332809138, 0.9137450097741173, 0.9203536670942448]
task 6 =>> taskLabels [25, 26, 27, 28, 29]

np.unique(Y) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24] np.unique(Y_train) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 14 15 16 17 18 19 20 21 22 23 24]
=> Acc: 0.775 Precision 0.775 Recall 0.775 F1 0.776 
=> Acc: 0.952 Precision 0.952 Recall 0.952 F1 0.950 
=> Acc: 0.735 Precision 0.735 Recall 0.735 F1 0.677 
=> Acc: 0.831 Precision 0.831 Recall 0.831 F1 0.821 
=> Acc: 0.821 Precision 0.821 Recall 0.821 F1 0.800 
=> Acc: 1.000 Precision 1.000 Recall 1.000 F1 1.000 


accs [0.7751677852348994, 0.9519867549668874, 0.7349397590361446, 0.8313253012048193, 0.8207771609833465, 1.0]
 precisions [0.7818791946308725, 0.9437086092715232, 0.7590361445783133, 0.8333333333333334, 0.8210415014538726, 1.0]
 recalls [0.785234899328859, 0.9321192052980133, 0.7319277108433735, 0.8403614457831325, 0.8226275442770288, 0.9986928104575163]
 f1scores [0.7562902476888262, 0.9620666694585701, 0.6628157677687458, 0.825111570121382, 0.8040135876049819, 1.0]
task 7 =>> taskLabels [30, 31, 32, 33, 34]

np.unique(Y) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29] np.unique(Y_train) [ 0  1  4  5  7  8 10 11 12 13 14 15 16 18 20 21 22 23 24 25 26 28]
=> Acc: 0.658 Precision 0.658 Recall 0.658 F1 0.573 
=> Acc: 0.664 Precision 0.664 Recall 0.664 F1 0.621 
=> Acc: 0.961 Precision 0.961 Recall 0.961 F1 0.959 
=> Acc: 0.658 Precision 0.658 Recall 0.658 F1 0.580 
=> Acc: 0.838 Precision 0.838 Recall 0.838 F1 0.830 
=> Acc: 0.766 Precision 0.766 Recall 0.766 F1 0.731 
=> Acc: 0.938 Precision 0.938 Recall 0.938 F1 0.937 


accs [0.6577181208053692, 0.6639072847682119, 0.9608433734939759, 0.6576305220883534, 0.837959291567539, 0.7660130718954249, 0.9382940108892922]
 precisions [0.6174496644295302, 0.6754966887417219, 0.9246987951807228, 0.6696787148594378, 0.8429817605075337, 0.7738562091503268, 0.9233212341197822]
 recalls [0.6342281879194631, 0.6539735099337748, 0.9337349397590361, 0.6184738955823293, 0.8276500132170235, 0.796078431372549, 0.940562613430127]
 f1scores [0.5587302028721222, 0.6468978408876542, 0.9376570865583895, 0.5619822386551869, 0.8406624380546329, 0.7354982652825761, 0.9385441072553368]
task 8 =>> taskLabels [35, 36, 37, 38, 39]

np.unique(Y) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34] np.unique(Y_train) [ 0  1  4  5  7  8 10 11 13 14 16 17 18 20 21 22 23 24 26 28 30 32 33 34]
=> Acc: 0.527 Precision 0.527 Recall 0.527 F1 0.382 
=> Acc: 0.598 Precision 0.598 Recall 0.598 F1 0.461 
=> Acc: 0.669 Precision 0.669 Recall 0.669 F1 0.619 
=> Acc: 0.557 Precision 0.557 Recall 0.557 F1 0.508 
=> Acc: 0.810 Precision 0.810 Recall 0.810 F1 0.804 
=> Acc: 0.431 Precision 0.431 Recall 0.431 F1 0.241 
=> Acc: 0.834 Precision 0.834 Recall 0.834 F1 0.830 
=> Acc: 0.984 Precision 0.984 Recall 0.984 F1 0.984 


accs [0.5268456375838926, 0.597682119205298, 0.6686746987951807, 0.5572289156626506, 0.8104678826328311, 0.43137254901960786, 0.8339382940108893, 0.9837837837837838]
 precisions [0.44966442953020136, 0.5463576158940397, 0.6746987951807228, 0.5612449799196787, 0.817340734866508, 0.36993464052287583, 0.8498185117967332, 0.9882882882882883]
 recalls [0.3959731543624161, 0.5645695364238411, 0.6807228915662651, 0.5622489959839357, 0.8181337562780862, 0.37516339869281046, 0.8398366606170599, 0.9855855855855856]
 f1scores [0.34665027214899335, 0.420536540240518, 0.6183057920044222, 0.4864831174685092, 0.8219795769983278, 0.2278973529950224, 0.8245433589269924, 0.9883666550952807]
task 9 =>> taskLabels [40, 41, 42, 43, 44]

np.unique(Y) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39] np.unique(Y_train) [ 0  1  2  3  4  5  6  7 11 13 14 18 20 21 22 23 24 25 26 28 30 31 32 34
 36 39]
=> Acc: 0.604 Precision 0.604 Recall 0.604 F1 0.567 
=> Acc: 0.599 Precision 0.599 Recall 0.599 F1 0.493 
=> Acc: 0.611 Precision 0.611 Recall 0.611 F1 0.478 
=> Acc: 0.206 Precision 0.206 Recall 0.206 F1 0.068 
=> Acc: 0.599 Precision 0.599 Recall 0.599 F1 0.566 
=> Acc: 0.488 Precision 0.488 Recall 0.488 F1 0.375 
=> Acc: 0.775 Precision 0.775 Recall 0.775 F1 0.746 
=> Acc: 0.400 Precision 0.400 Recall 0.400 F1 0.243 
=> Acc: 0.834 Precision 0.834 Recall 0.834 F1 0.816 


accs [0.6040268456375839, 0.5993377483443708, 0.6114457831325302, 0.20582329317269077, 0.598731165741475, 0.4875816993464052, 0.7754083484573503, 0.40045045045045047, 0.834351145038168]
 precisions [0.6342281879194631, 0.5761589403973509, 0.5963855421686747, 0.21887550200803213, 0.6037536346814697, 0.5098039215686274, 0.7658802177858439, 0.3855855855855856, 0.8236641221374046]
 recalls [0.6073825503355704, 0.6009933774834437, 0.5903614457831325, 0.19979919678714858, 0.5992598466825271, 0.47581699346405226, 0.765426497277677, 0.39234234234234233, 0.8137404580152672]
 f1scores [0.6113221129400492, 0.4539537538597075, 0.46186054902684714, 0.06464646464646465, 0.5788211232885795, 0.3642035227112924, 0.7532354117334741, 0.23527625480565564, 0.7898570309075373]
task 10 =>> taskLabels [45, 46, 47, 48, 49]

np.unique(Y) [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44] np.unique(Y_train) [ 7  8 11 12 13 14 17 18 19 20 21 22 23 24 26 28 30 32 34 36 38 39 40 44]
done w/ time
All done
